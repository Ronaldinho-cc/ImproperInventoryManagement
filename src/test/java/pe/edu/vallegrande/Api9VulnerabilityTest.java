package pe.edu.vallegrande;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class Api9VulnerabilityTest {

    @LocalServerPort
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    private String createUrl(String endpoint) {
        return "http://localhost:" + port + endpoint;
    }

    @Test
    public void testVulnerableV1ExposesPasswords() {
        // Test que demuestra que la versión V1 expone passwords
        ResponseEntity<String> response = restTemplate.getForEntity(
                createUrl("/api/users"), String.class);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        String responseBody = response.getBody();
        assertNotNull(responseBody);
        
        // VULNERABLE: La respuesta contiene passwords
        assertTrue(responseBody.contains("password"), 
                "V1 API vulnerably exposes passwords in response");
        assertTrue(responseBody.contains("admin123"), 
                "V1 API exposes actual password values");
    }

    @Test
    public void testSecureV2DoesNotExposePasswords() {
        // Test que demuestra que la versión V2 NO expone passwords
        ResponseEntity<String> response = restTemplate.getForEntity(
                createUrl("/api/v2/users"), String.class);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        String responseBody = response.getBody();
        assertNotNull(responseBody);
        
        // SECURE: La respuesta NO contiene passwords
        assertFalse(responseBody.contains("password"), 
                "V2 API should not expose password field");
        assertFalse(responseBody.contains("admin123"), 
                "V2 API should not expose password values");
        
        // Pero sí contiene otros datos necesarios
        assertTrue(responseBody.contains("username"), 
                "V2 API should include username");
        assertTrue(responseBody.contains("email"), 
                "V2 API should include email");
    }

    @Test
    public void testLegacyEndpointsAreStillAccessible() {
        // Test que demuestra que endpoints legacy siguen accesibles (PROBLEMA)
        ResponseEntity<String> response1 = restTemplate.getForEntity(
                createUrl("/legacy/old-endpoint"), String.class);
        
        assertEquals(HttpStatus.OK, response1.getStatusCode());
        assertEquals("This is an old endpoint that should be deprecated", 
                response1.getBody());

        ResponseEntity<String> response2 = restTemplate.getForEntity(
                createUrl("/legacy/internal/config"), String.class);
        
        assertEquals(HttpStatus.OK, response2.getStatusCode());
        assertEquals("Internal config: database=prod, debug=true", 
                response2.getBody());
    }

    @Test
    public void testApiInventoryProvidesClearInformation() {
        // Test que demuestra que la solución proporciona inventario claro
        ResponseEntity<String> response = restTemplate.getForEntity(
                createUrl("/api/v2/inventory"), String.class);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        String responseBody = response.getBody();
        assertNotNull(responseBody);
        
        // Verifica que el inventario incluye información importante
        assertTrue(responseBody.contains("DEPRECATED"), 
                "Inventory should mark deprecated versions");
        assertTrue(responseBody.contains("CURRENT"), 
                "Inventory should mark current version");
        assertTrue(responseBody.contains("v1"), 
                "Inventory should list v1");
        assertTrue(responseBody.contains("v2"), 
                "Inventory should list v2");
    }

    @Test
    public void testDeprecatedEndpointsAreListed() {
        // Test que verifica que los endpoints deprecados están listados
        ResponseEntity<String> response = restTemplate.getForEntity(
                createUrl("/api/v2/inventory/deprecated"), String.class);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        String responseBody = response.getBody();
        assertNotNull(responseBody);
        
        assertTrue(responseBody.contains("/api/users"), 
                "Should list deprecated v1 users endpoint");
        assertTrue(responseBody.contains("/legacy/"), 
                "Should list deprecated legacy endpoints");
        assertTrue(responseBody.contains("removalDate"), 
                "Should provide removal date for deprecated endpoints");
    }

    @Test
    public void testSwaggerDocumentationIsAvailable() {
        // Test que verifica que la documentación Swagger está disponible
        ResponseEntity<String> response = restTemplate.getForEntity(
                createUrl("/api-docs"), String.class);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        String responseBody = response.getBody();
        assertNotNull(responseBody);
        
        // Verifica que contiene información de OpenAPI
        assertTrue(responseBody.contains("openapi"), 
                "Should contain OpenAPI specification");
        assertTrue(responseBody.contains("paths"), 
                "Should contain API paths documentation");
    }
}